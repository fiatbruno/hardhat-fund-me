/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { FundMe, FundMeInterface } from "../../contracts/FundMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeedAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FundMe__NotOwner",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MINIMUM_USD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cheaperWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "funder",
        type: "address",
      },
    ],
    name: "getAddressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getFunder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPriceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620018b5380380620018b5833981810160405281019062000037919062000174565b62000053675192ca43e6cfb04660c01b6200010760201b60201c565b6200006f67fdebaece966796e660c01b6200010760201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000bf67e550ec8e7fe4dcc060c01b6200010760201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001a6565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200013c826200010f565b9050919050565b6200014e816200012f565b81146200015a57600080fd5b50565b6000815190506200016e8162000143565b92915050565b6000602082840312156200018d576200018c6200010a565b5b60006200019d848285016200015d565b91505092915050565b6080516116e5620001d0600039600081816104ce015281816108ad015261098901526116e56000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610192578063b60d4288146101bd578063be2693f0146101c7578063d7b4750c146101de576100a2565b80630343fb25146100e85780633ccfd60b146101255780636b69a5921461013c578063893d20e814610167576100a2565b366100a25761009867ca8836998cf74d5d60c01b61021b565b6100a061021e565b005b6100b667d1403b752810fd3260c01b61021b565b6100ca6708040bd21bf6564160c01b61021b565b6100de6707a53d24ff6c1e3d60c01b61021b565b6100e661021e565b005b3480156100f457600080fd5b5061010f600480360381019061010a91906110f7565b6103f8565b60405161011c919061113d565b60405180910390f35b34801561013157600080fd5b5061013a61047c565b005b34801561014857600080fd5b50610151610860565b60405161015e919061113d565b60405180910390f35b34801561017357600080fd5b5061017c61086d565b6040516101899190611167565b60405180910390f35b34801561019e57600080fd5b506101a76108d1565b6040516101b491906111e1565b60405180910390f35b6101c561021e565b005b3480156101d357600080fd5b506101dc610937565b005b3480156101ea57600080fd5b5061020560048036038101906102009190611228565b610da7565b6040516102129190611167565b60405180910390f35b50565b61023267a6e01302c323a2f360c01b61021b565b61024667d010f3da5867273c60c01b61021b565b61025a6799934dc0e2953f8760c01b61021b565b61026e67f8297b64bd95ca5e60c01b61021b565b6802b5e3af16b18800006102ad600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610e2b90919063ffffffff16565b10156102ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e5906112b2565b60405180910390fd5b6103026755c180dd6e7a79c760c01b61021b565b610316671f4750a13b4a285560c01b61021b565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103649190611301565b9250508190555061037f6714a9e1618885032060c01b61021b565b61039367787f6bb26d72c07f60c01b61021b565b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600061040e673bd2393f3488c91f60c01b61021b565b61042267203801e44a7087ce60c01b61021b565b610436678523c22feee5a5af60c01b61021b565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61049067199e9e0429bb124460c01b61021b565b6104a467957396ba67556c5660c01b61021b565b6104b867a1b3d033bfc1bbbe60c01b61021b565b6104cc6771c21db9103f839460c01b61021b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610565576105336719e155cd8dc2301d60c01b61021b565b6040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61057967f6d599a17d45268360c01b61021b565b61058d67260d71d2df923c1b60c01b61021b565b6105a167bcda745057f1871660c01b61021b565b6105b56738a701430b7750c560c01b61021b565b6105c967d6b93363b7e822fa60c01b61021b565b6105dd67982a51ff699da0cc60c01b61021b565b60005b6001805490508110156106c4576106016781b15127b03b47b160c01b61021b565b61061567cf33a5e9315df20e60c01b61021b565b60006001828154811061062b5761062a611335565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061066c670d022475de085dec60c01b61021b565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106bc90611364565b9150506105e0565b506106d96764ec88af8ed8f0da60c01b61021b565b600067ffffffffffffffff8111156106f4576106f36113ac565b5b6040519080825280602002602001820160405280156107225781602001602082028036833780820191505090505b5060019080519060200190610738929190610fed565b5061074d671f3218b76c3c59ef60c01b61021b565b610761672f14a7a939c49bba60c01b61021b565b60003373ffffffffffffffffffffffffffffffffffffffff16476040516107879061140c565b60006040518083038185875af1925050503d80600081146107c4576040519150601f19603f3d011682016040523d82523d6000602084013e6107c9565b606091505b505090506107e1673af131992365e87160c01b61021b565b6107f567d5a5a5f9d9fa6a5260c01b61021b565b610809673bfb89e3dc8dd7fa60c01b61021b565b80610849576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108409061146d565b60405180910390fd5b61085d67811f6df69986ab8e60c01b61021b565b50565b6802b5e3af16b188000081565b600061088367475f168a0783c9fc60c01b61021b565b61089767f02235bf56e0feba60c01b61021b565b6108ab67eec4e99748a04f4660c01b61021b565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60006108e7673431669e0604bbee60c01b61021b565b6108fb6780dd1abe25ba637d60c01b61021b565b61090f6792ffe50f70a8cbe460c01b61021b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61094b67dcecb3360c4e791c60c01b61021b565b61095f67957396ba67556c5660c01b61021b565b61097367a1b3d033bfc1bbbe60c01b61021b565b6109876771c21db9103f839460c01b61021b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a20576109ee6719e155cd8dc2301d60c01b61021b565b6040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a3467f6d599a17d45268360c01b61021b565b610a4867260d71d2df923c1b60c01b61021b565b610a5c673204e9811604de1260c01b61021b565b610a7067d36913943d456c3960c01b61021b565b610a8467fe9cd15133a0463260c01b61021b565b610a9867e3074558073c661860c01b61021b565b60006001805480602002602001604051908101604052809291908181526020018280548015610b1c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ad2575b50505050509050610b37678c99fd98f9ae252360c01b61021b565b610b4b67aa637593c2a0e00160c01b61021b565b60005b8151811015610c0a57610b6b6778cd5110a004b7bd60c01b61021b565b610b7f67683652eae4702f4660c01b61021b565b6000828281518110610b9457610b93611335565b5b60200260200101519050610bb267edbbd042ceda88f260c01b61021b565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610c0290611364565b915050610b4e565b50610c1f67d3cb23ffdee51d2a60c01b61021b565b600067ffffffffffffffff811115610c3a57610c396113ac565b5b604051908082528060200260200182016040528015610c685781602001602082028036833780820191505090505b5060019080519060200190610c7e929190610fed565b50610c93673bcdc439f8edabc260c01b61021b565b610ca767a5007a6de39baa9d60c01b61021b565b60003373ffffffffffffffffffffffffffffffffffffffff1647604051610ccd9061140c565b60006040518083038185875af1925050503d8060008114610d0a576040519150601f19603f3d011682016040523d82523d6000602084013e610d0f565b606091505b50509050610d27679ec950ee1b463e3d60c01b61021b565b610d3b679418c218b7dc9db760c01b61021b565b610d4f678d0d954b37aa364360c01b61021b565b80610d8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d869061146d565b60405180910390fd5b610da36764b9667eb168575260c01b61021b565b5050565b6000610dbd671008a6973867558160c01b61021b565b610dd167c818dad44a508a4b60c01b61021b565b610de5675f3d8c68f80e1bcc60c01b61021b565b60018281548110610df957610df8611335565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610e4167f5e9a76286ee27f760c01b610ef4565b610e55676221d2395e7ada7d60c01b610ef4565b610e6967e4e00bc201dcbbee60c01b610ef4565b6000610e7483610ef7565b9050610e8a67878068e3086f831060c01b610ef4565b610e9e6725dd7ed3c9042fe760c01b610ef4565b6000670de0b6b3a76400008583610eb5919061148d565b610ebf91906114fe565b9050610ed567c2d689978d488cd160c01b610ef4565b610ee967b3ab2e77a121e85860c01b610ef4565b809250505092915050565b50565b6000610f0d671c295f91bca980ca60c01b610ef4565b610f21673b0dc12c9fa88e6760c01b610ef4565b610f3567fc3b5ceb6bcc1d9b60c01b610ef4565b60008273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa691906115bc565b505050915050610fc0675305550dee3436b360c01b610ef4565b610fd467b57d6da6c6a2bb0f60c01b610ef4565b6402540be40081610fe59190611637565b915050919050565b828054828255906000526020600020908101928215611066579160200282015b828111156110655782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061100d565b5b5090506110739190611077565b5090565b5b80821115611090576000816000905550600101611078565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110c482611099565b9050919050565b6110d4816110b9565b81146110df57600080fd5b50565b6000813590506110f1816110cb565b92915050565b60006020828403121561110d5761110c611094565b5b600061111b848285016110e2565b91505092915050565b6000819050919050565b61113781611124565b82525050565b6000602082019050611152600083018461112e565b92915050565b611161816110b9565b82525050565b600060208201905061117c6000830184611158565b92915050565b6000819050919050565b60006111a76111a261119d84611099565b611182565b611099565b9050919050565b60006111b98261118c565b9050919050565b60006111cb826111ae565b9050919050565b6111db816111c0565b82525050565b60006020820190506111f660008301846111d2565b92915050565b61120581611124565b811461121057600080fd5b50565b600081359050611222816111fc565b92915050565b60006020828403121561123e5761123d611094565b5b600061124c84828501611213565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b600061129c601b83611255565b91506112a782611266565b602082019050919050565b600060208201905081810360008301526112cb8161128f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061130c82611124565b915061131783611124565b925082820190508082111561132f5761132e6112d2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061136f82611124565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113a1576113a06112d2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006113f66000836113db565b9150611401826113e6565b600082019050919050565b6000611417826113e9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611457600b83611255565b915061146282611421565b602082019050919050565b600060208201905081810360008301526114868161144a565b9050919050565b600061149882611124565b91506114a383611124565b92508282026114b181611124565b915082820484148315176114c8576114c76112d2565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061150982611124565b915061151483611124565b925082611524576115236114cf565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61154e8161152f565b811461155957600080fd5b50565b60008151905061156b81611545565b92915050565b6000819050919050565b61158481611571565b811461158f57600080fd5b50565b6000815190506115a18161157b565b92915050565b6000815190506115b6816111fc565b92915050565b600080600080600060a086880312156115d8576115d7611094565b5b60006115e68882890161155c565b95505060206115f788828901611592565b9450506040611608888289016115a7565b9350506060611619888289016115a7565b925050608061162a8882890161155c565b9150509295509295909350565b600061164282611571565b915061164d83611571565b925082820261165b81611571565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615611693576116926112d2565b5b82820584148315176116a8576116a76112d2565b5b509291505056fea264697066735822122053e71fb63ee29f79d87b6243a9da364f03c65dd5af1293b6afa219016169c53a64736f6c63430008110033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    priceFeedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FundMe> {
    return super.deploy(priceFeedAddress, overrides || {}) as Promise<FundMe>;
  }
  override getDeployTransaction(
    priceFeedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(priceFeedAddress, overrides || {});
  }
  override attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  override connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
