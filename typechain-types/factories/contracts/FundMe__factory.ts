/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { FundMe, FundMeInterface } from "../../contracts/FundMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeedAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FundMe__NotOwner",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MINIMUM_USD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "addressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "funders",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "iOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610ef5380380610ef583398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610d9661015f600039600081816102e501526105700152610d966000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c57806377c9dd4b14610137578063b60d428814610162578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107a8565b610523565b6040516100d891906107ee565b60405180910390f35b3480156100ed57600080fd5b506100f661053b565b60405161010391906107ee565b60405180910390f35b34801561011857600080fd5b50610121610548565b60405161012e9190610868565b60405180910390f35b34801561014357600080fd5b5061014c61056e565b6040516101599190610892565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e91906108d9565b610592565b6040516101a09190610892565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d190919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610963565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027791906109b2565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610368576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104135760006001828154811061038e5761038d6109e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040b90610a15565b91505061036b565b50600067ffffffffffffffff81111561042f5761042e610a5d565b5b60405190808252806020026020018201604052801561045d5781602001602082028036833780820191505090505b506001908051906020019061047392919061069e565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049a90610abd565b60006040518083038185875af1925050503d80600081146104d7576040519150601f19603f3d011682016040523d82523d6000602084013e6104dc565b606091505b5050905080610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051790610b1e565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181815481106105a257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105dd8361060d565b90506000670de0b6b3a764000085836105f69190610b3e565b6106009190610baf565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190610c6d565b5050509150506402540be400816106969190610ce8565b915050919050565b828054828255906000526020600020908101928215610717579160200282015b828111156107165782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106be565b5b5090506107249190610728565b5090565b5b80821115610741576000816000905550600101610729565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107758261074a565b9050919050565b6107858161076a565b811461079057600080fd5b50565b6000813590506107a28161077c565b92915050565b6000602082840312156107be576107bd610745565b5b60006107cc84828501610793565b91505092915050565b6000819050919050565b6107e8816107d5565b82525050565b600060208201905061080360008301846107df565b92915050565b6000819050919050565b600061082e6108296108248461074a565b610809565b61074a565b9050919050565b600061084082610813565b9050919050565b600061085282610835565b9050919050565b61086281610847565b82525050565b600060208201905061087d6000830184610859565b92915050565b61088c8161076a565b82525050565b60006020820190506108a76000830184610883565b92915050565b6108b6816107d5565b81146108c157600080fd5b50565b6000813590506108d3816108ad565b92915050565b6000602082840312156108ef576108ee610745565b5b60006108fd848285016108c4565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b600061094d601b83610906565b915061095882610917565b602082019050919050565b6000602082019050818103600083015261097c81610940565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109bd826107d5565b91506109c8836107d5565b92508282019050808211156109e0576109df610983565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a20826107d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a5257610a51610983565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610aa7600083610a8c565b9150610ab282610a97565b600082019050919050565b6000610ac882610a9a565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b08600b83610906565b9150610b1382610ad2565b602082019050919050565b60006020820190508181036000830152610b3781610afb565b9050919050565b6000610b49826107d5565b9150610b54836107d5565b9250828202610b62816107d5565b91508282048414831517610b7957610b78610983565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bba826107d5565b9150610bc5836107d5565b925082610bd557610bd4610b80565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bff81610be0565b8114610c0a57600080fd5b50565b600081519050610c1c81610bf6565b92915050565b6000819050919050565b610c3581610c22565b8114610c4057600080fd5b50565b600081519050610c5281610c2c565b92915050565b600081519050610c67816108ad565b92915050565b600080600080600060a08688031215610c8957610c88610745565b5b6000610c9788828901610c0d565b9550506020610ca888828901610c43565b9450506040610cb988828901610c58565b9350506060610cca88828901610c58565b9250506080610cdb88828901610c0d565b9150509295509295909350565b6000610cf382610c22565b9150610cfe83610c22565b9250828202610d0c81610c22565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d4457610d43610983565b5b8282058414831517610d5957610d58610983565b5b509291505056fea26469706673582212206c1391378ff2ee66bf69c0ffa1511441f7ea97ff04b28cc7e247df8b5f28fb6e64736f6c63430008110033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    priceFeedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FundMe> {
    return super.deploy(priceFeedAddress, overrides || {}) as Promise<FundMe>;
  }
  override getDeployTransaction(
    priceFeedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(priceFeedAddress, overrides || {});
  }
  override attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  override connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
